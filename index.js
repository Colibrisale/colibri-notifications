app.post("/api/notifications/send", upload.single("image"), async (req, res) => {
    try {
        let { customerId, title, message, link } = req.body;
        const imageFile = req.file;

        if (!title || !message) {
            console.error("‚ùå –û—à–∏–±–∫–∞: –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã", req.body);
            return res.status(400).json({ success: false, error: "title –∏ message –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!" });
        }

        console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", req.body);

        let imageUrl = "";
        if (imageFile) {
            console.log("üì∏ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Shopify...");
            const imageResponse = await axios.post(
                `https://${process.env.SHOPIFY_STORE_URL}/admin/api/2023-10/files.json`,
                {
                    file: {
                        attachment: imageFile.buffer.toString("base64"),
                        filename: imageFile.originalname
                    }
                },
                {
                    headers: {
                        "X-Shopify-Access-Token": process.env.SHOPIFY_ACCESS_TOKEN,
                        "Content-Type": "application/json",
                        "Accept": "application/json"
                    }
                }
            );
            imageUrl = imageResponse.data.file.public_url;
            console.log("üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:", imageUrl);
        }

        // –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–¥–µ—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        if (customerId === "all") {
            console.log("üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤...");
            const customersResponse = await axios.get(
                `https://${process.env.SHOPIFY_STORE_URL}/admin/api/2023-10/customers.json`,
                {
                    headers: {
                        "X-Shopify-Access-Token": process.env.SHOPIFY_ACCESS_TOKEN,
                        "Accept": "application/json"
                    }
                }
            );

            const customers = customersResponse.data.customers;
            console.log(`üë• –ù–∞–π–¥–µ–Ω–æ ${customers.length} –∫–ª–∏–µ–Ω—Ç–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...`);

            for (const customer of customers) {
                await sendNotificationToCustomer(customer.id, title, message, imageUrl, link);
            }

            return res.json({ success: true, message: `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã ${customers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!` });
        }

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await sendNotificationToCustomer(customerId, title, message, imageUrl, link);

        res.json({ success: true, message: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!" });

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:", error.response ? error.response.data : error.message);
        res.status(500).json({ success: false, error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Shopify" });
    }
});

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async function sendNotificationToCustomer(customerId, title, message, imageUrl, link) {
    // üè∑Ô∏è –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥ –≤ Shopify
    await axios.put(
        `https://${process.env.SHOPIFY_STORE_URL}/admin/api/2023-10/customers/${customerId}.json`,
        { customer: { id: customerId, tags: title } },
        {
            headers: {
                "X-Shopify-Access-Token": process.env.SHOPIFY_ACCESS_TOKEN,
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        }
    );

    // üîπ –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ –º–µ—Ç–∞—Ñ–∏–ª–¥–æ–≤
    const getResponse = await axios.get(
        `https://${process.env.SHOPIFY_STORE_URL}/admin/api/2023-10/customers/${customerId}/metafields.json`,
        {
            headers: {
                "X-Shopify-Access-Token": process.env.SHOPIFY_ACCESS_TOKEN,
                "Accept": "application/json"
            }
        }
    );

    let existingNotifications = [];
    if (getResponse.data.metafields) {
        const notifMetafield = getResponse.data.metafields.find(m => m.namespace === "notifications");
        if (notifMetafield) {
            existingNotifications = JSON.parse(notifMetafield.value);
        }
    }

    // üÜï –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const newNotification = {
        title,
        message,
        image: imageUrl,
        link,
        timestamp: new Date().toISOString()
    };
    existingNotifications.unshift(newNotification);

    // ‚úèÔ∏è –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ Shopify
    await axios.post(
        `https://${process.env.SHOPIFY_STORE_URL}/admin/api/2023-10/customers/${customerId}/metafields.json`,
        {
            metafield: {
                namespace: "notifications",
                key: "messages",
                value: JSON.stringify(existingNotifications),
                type: "json_string"
            }
        },
        {
            headers: {
                "X-Shopify-Access-Token": process.env.SHOPIFY_ACCESS_TOKEN,
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        }
    );

    console.log(`üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${customerId}:`, newNotification);
}
