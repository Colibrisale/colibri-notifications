import express from "express";
import dotenv from "dotenv";
import cors from "cors";
import axios from "axios";
import multer from "multer";
import FormData from "form-data";

dotenv.config();

const app = express();
const PORT = process.env.PORT || 3000;

app.use(cors({
    origin: ["https://colibri.sale"],
    methods: "GET,POST,PUT,DELETE",
    allowedHeaders: "Content-Type,Authorization"
}));

app.use(express.json());
const upload = multer({ storage: multer.memoryStorage() });

app.get("/", (req, res) => {
    res.send("‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!");
});

let globalNotifications = []; // –•—Ä–∞–Ω–∏–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

// üîπ –≠–Ω–¥–ø–æ–∏–Ω—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–¥–ª—è –∫–æ–ª–æ–∫–æ–ª—å—á–∏–∫–∞)
app.get("/api/notifications/unread", (req, res) => {
    const unreadCount = globalNotifications.filter(n => !n.read).length;
    res.json({ success: true, unread: unreadCount });
});

// üîπ –≠–Ω–¥–ø–æ–∏–Ω—Ç: –ü–æ–º–µ—Ç–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
app.put("/api/notifications/read", (req, res) => {
    globalNotifications.forEach(n => n.read = true);
    res.json({ success: true, message: "–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ—á–∏—Ç–∞–Ω—ã" });
});

// üîπ –≠–Ω–¥–ø–æ–∏–Ω—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
app.get("/api/notifications", (req, res) => {
    res.json({ success: true, notifications: globalNotifications });
});

// üîπ –≠–Ω–¥–ø–æ–∏–Ω—Ç: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
app.post("/api/notifications/send", upload.single("image"), async (req, res) => {
    try {
        const { title = "", message = "", link = "", userFilter } = req.body;
        const imageFile = req.file;
        let imageUrl = "";

        if (imageFile) {
            try {
                console.log("üì∏ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Shopify...");
                const formData = new FormData();
                formData.append("file", imageFile.buffer, imageFile.originalname);

                console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Shopify, –≤–æ—Ç —á—Ç–æ –≤ formData:", formData);

                const imageResponse = await axios.post(
                    `https://${process.env.SHOPIFY_STORE_URL}/admin/api/2024-01/files.json`,
                    formData,
                    {
                        headers: {
                            "X-Shopify-Access-Token": process.env.SHOPIFY_ACCESS_TOKEN,
                            "Accept": "application/json",
                            ...formData.getHeaders(),
                        },
                    }
                );
                imageUrl = imageResponse.data.file.public_url;
                console.log("üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:", imageUrl);
            } catch (err) {
                console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", err.response ? JSON.stringify(err.response.data, null, 2) : err.message);
            }
        }

        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤—ã–±–æ—Ä—É –≤ –∞–¥–º–∏–Ω–∫–µ
        let recipients = [];
        if (userFilter === "all") {
            recipients = await getAllUsers();
        } else if (userFilter === "registered") {
            recipients = await getRegisteredUsers();
        } else if (userFilter === "guests") {
            recipients = await getGuestUsers();
        }

        console.log(`üì© –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${userFilter} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –í—Å–µ–≥–æ: ${recipients.length}`);

        const newNotification = { 
            id: Date.now(), 
            title, 
            message, 
            image: imageUrl, 
            link, 
            timestamp: new Date().toISOString(),
            read: false // –í—Å–µ –Ω–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
        };
        globalNotifications.unshift(newNotification);

        res.json({ success: true, message: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!" });
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:", error.response ? JSON.stringify(error.response.data, null, 2) : error.message);
        res.status(500).json({ success: false, error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" });
    }
});

// üîπ API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
app.delete("/api/notifications/:id", (req, res) => {
    const notificationId = parseInt(req.params.id);
    globalNotifications = globalNotifications.filter(n => n.id !== notificationId);
    res.json({ success: true, message: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!" });
});

// üîπ API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
app.delete("/api/notifications/clear", (req, res) => {
    globalNotifications = [];
    res.json({ success: true, message: "–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã!" });
});

app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// üîπ –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function getAllUsers() {
    const response = await axios.get(`https://${process.env.SHOPIFY_STORE_URL}/admin/api/2024-01/customers.json`, {
        headers: { "X-Shopify-Access-Token": process.env.SHOPIFY_ACCESS_TOKEN }
    });
    return response.data.customers.map(c => c.email);
}

async function getRegisteredUsers() {
    const users = await getAllUsers();
    return users.filter(user => user);
}

async function getGuestUsers() {
    const registered = await getRegisteredUsers();
    return ["guest1@example.com", "guest2@example.com"].filter(g => !registered.includes(g));
}
// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
app.post("/api/notifications/read", (req, res) => {
    globalNotifications.forEach(n => n.read = true);
    res.json({ success: true, message: "–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ" });
});
